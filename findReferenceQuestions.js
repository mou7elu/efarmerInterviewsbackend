/**
 * Script pour identifier les questions li√©es aux tables de r√©f√©rence
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { Question } = require('./models');

const MONGO_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/efarmer_interviews';

async function findReferenceQuestions() {
  try {
    await mongoose.connect(MONGO_URI);
    console.log('üóÑÔ∏è Connect√© √† MongoDB');

    // Rechercher les questions li√©es aux entit√©s g√©ographiques/administratives
    const questions = await Question.find({
      $or: [
        { texte: /district/i },
        { texte: /r√©gion/i },
        { texte: /d√©partement/i },
        { texte: /sous.pr√©fecture/i },
        { texte: /village/i },
        { texte: /pays/i },
        { texte: /nationalit√©/i },
        { texte: /niveau.*instruction/i },
        { texte: /justificatif.*identit√©/i },
        { texte: /niveau.*scolaire/i },
        { texte: /pi√®ce.*identit√©/i },
        { texte: /origine/i },
        { texte: /localit√©/i },
        { texte: /r√©sidence/i },
        { texte: /formation/i }
      ]
    }).sort({ code: 1 });

    console.log('\nüìç QUESTIONS AVEC R√âF√âRENCES G√âOGRAPHIQUES/ADMINISTRATIVES:\n');

    const mappings = {
      'District': [],
      'R√©gion': [],
      'D√©partement': [],
      'Sous-pr√©fecture': [],
      'Village': [],
      'Pays': [],
      'Nationalit√©': [],
      'Niveau scolaire': [],
      'Pi√®ce d\'identit√©': []
    };

    questions.forEach(q => {
      console.log(`${q.code}: ${q.texte}`);
      if (q.options && q.options.length > 0) {
        console.log(`  Options: ${q.options.map(o => o.libelle).join(', ')}`);
      }
      
      // Cat√©goriser les questions
      const text = q.texte.toLowerCase();
      if (text.includes('district')) mappings['District'].push(q);
      if (text.includes('r√©gion')) mappings['R√©gion'].push(q);
      if (text.includes('d√©partement')) mappings['D√©partement'].push(q);
      if (text.includes('sous-pr√©fecture') || text.includes('sous pr√©fecture')) mappings['Sous-pr√©fecture'].push(q);
      if (text.includes('village') || text.includes('localit√©')) mappings['Village'].push(q);
      if (text.includes('pays') || text.includes('origine')) mappings['Pays'].push(q);
      if (text.includes('nationalit√©')) mappings['Nationalit√©'].push(q);
      if (text.includes('niveau') && (text.includes('instruction') || text.includes('scolaire') || text.includes('√©tude'))) mappings['Niveau scolaire'].push(q);
      if (text.includes('justificatif') || text.includes('pi√®ce')) mappings['Pi√®ce d\'identit√©'].push(q);
      
      console.log('');
    });

    console.log('\nüîó MAPPING PROPOS√â AVEC LES TABLES DE R√âF√âRENCE:\n');

    for (const [table, questions] of Object.entries(mappings)) {
      if (questions.length > 0) {
        console.log(`üìä ${table.toUpperCase()}:`);
        questions.forEach(q => {
          console.log(`   ${q.code}: ${q.texte}`);
        });
        console.log('');
      }
    }

    mongoose.disconnect();
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    mongoose.disconnect();
  }
}

findReferenceQuestions();