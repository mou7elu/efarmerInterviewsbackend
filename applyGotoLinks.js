/**
 * Script pour appliquer manuellement les sauts logiques les plus importants
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { Question } = require('./models');

const MONGO_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/efarmer_interviews';

async function applyGotoLinks() {
  try {
    await mongoose.connect(MONGO_URI);
    console.log('üóÑÔ∏è Connect√© √† MongoDB');

    // Mapping principal confirm√©
    const confirmedMappings = [
      {
        source: 'Q006', // "√ätes-vous l'exploitant ?"
        condition: 'Oui',
        target: 'Q014' // "Avez-vous re√ßu une formation agricole ?"
      },
      {
        source: 'Q027', // "Combien de personnes vivent dans le m√©nage ?"
        condition: '0',
        target: 'Q028' // "Combien d'enfants avez-vous ?"
      }
    ];

    let linksApplied = 0;

    for (const mapping of confirmedMappings) {
      console.log(`\nüîó Application du saut: ${mapping.source} (${mapping.condition}) ‚Üí ${mapping.target}`);
      
      // R√©cup√©rer la question source
      const sourceQuestion = await Question.findOne({ code: mapping.source });
      if (!sourceQuestion) {
        console.log(`   ‚ùå Question source ${mapping.source} non trouv√©e`);
        continue;
      }

      // R√©cup√©rer la question cible
      const targetQuestion = await Question.findOne({ code: mapping.target });
      if (!targetQuestion) {
        console.log(`   ‚ùå Question cible ${mapping.target} non trouv√©e`);
        continue;
      }

      console.log(`   üìù Source: "${sourceQuestion.texte}"`);
      console.log(`   üìù Cible: "${targetQuestion.texte}"`);
      console.log(`   üìù Options disponibles:`, sourceQuestion.options.map(o => o.libelle));

      // Trouver l'option correspondante
      const matchingOption = sourceQuestion.options.find(opt => 
        opt.libelle.toLowerCase() === mapping.condition.toLowerCase() ||
        opt.valeur.toLowerCase() === mapping.condition.toLowerCase()
      );

      if (matchingOption) {
        // Appliquer le saut
        matchingOption.goto = targetQuestion._id.toString();
        await sourceQuestion.save();
        linksApplied++;
        console.log(`   ‚úÖ Saut appliqu√©: option "${matchingOption.libelle}" ‚Üí ${mapping.target} (${targetQuestion._id})`);
      } else {
        console.log(`   ‚ùå Option "${mapping.condition}" non trouv√©e`);
        console.log(`   üìã Options disponibles: ${sourceQuestion.options.map(o => `"${o.libelle}"`).join(', ')}`);
      }
    }

    console.log(`\nüéâ ${linksApplied} sauts logiques appliqu√©s avec succ√®s !`);

    // V√©rification finale
    console.log('\nüîç V√âRIFICATION DES LIENS APPLIQU√âS:');
    const questionsWithGoto = await Question.find({
      'options.goto': { $exists: true, $ne: null }
    });

    for (const question of questionsWithGoto) {
      console.log(`\nüìù ${question.code}: ${question.texte}`);
      for (const option of question.options) {
        if (option.goto) {
          const targetQuestion = await Question.findById(option.goto);
          console.log(`   ‚Üí Option "${option.libelle}" va vers: ${targetQuestion ? targetQuestion.code : 'INTROUVABLE'}`);
          if (targetQuestion) {
            console.log(`     Cible: "${targetQuestion.texte.substring(0, 60)}..."`);
          }
        }
      }
    }

    mongoose.disconnect();
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    mongoose.disconnect();
  }
}

applyGotoLinks();