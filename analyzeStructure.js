/**
 * Analyse plus approfondie pour identifier la vraie structure des questions
 */

require('dotenv').config();
const mammoth = require('mammoth');
const path = require('path');

const DOCX_FILE = path.join(__dirname, 'Questionnaire_IEEA.docx');

async function analyzeStructure() {
  try {
    console.log('üì• Lecture du fichier Word...');
    const { value: text } = await mammoth.extractRawText({ path: DOCX_FILE });
    
    const lines = text.split('\n').map(l => l.trim()).filter(Boolean);
    
    console.log('\nüîç RECHERCHE DES VRAIES QUESTIONS:');
    console.log('Format potentiel: num√©ro au d√©but de ligne suivi du texte\n');
    
    let questionCount = 0;
    for (let i = 0; i < lines.length && questionCount < 30; i++) {
      const line = lines[i];
      
      // Chercher des lignes qui commencent par un num√©ro suivi d'un point ou d'une parenth√®se
      if (/^\d+[\.\)]\s+/.test(line)) {
        console.log(`Question ${questionCount + 1}: "${line}"`);
        questionCount++;
      }
    }
    
    console.log('\n\nüîç RECHERCHE DE QUESTIONS AVEC MOTS-CL√âS:');
    console.log('Lignes contenant des mots-cl√©s de questions\n');
    
    const questionKeywords = /^(Quel|Quelle|Combien|Avez|√ätes|Comment|O√π|Quand|Pourquoi|Dans|Nom|Pr√©nom|√Çge|Date|Sexe|Num√©ro)/i;
    
    questionCount = 0;
    for (let i = 0; i < lines.length && questionCount < 30; i++) {
      const line = lines[i];
      
      if (questionKeywords.test(line) && line.length > 10) {
        console.log(`Question ${questionCount + 1}: "${line}"`);
        // Regarder les lignes suivantes pour les options
        for (let j = i + 1; j < Math.min(i + 5, lines.length); j++) {
          const nextLine = lines[j];
          if (/^\d+\.\s+/.test(nextLine) || /^-\s+/.test(nextLine)) {
            console.log(`   Option: "${nextLine}"`);
          } else if (nextLine.length > 0 && !/^(Si Q\.|Aller|Sinon)/i.test(nextLine)) {
            break;
          }
        }
        console.log('');
        questionCount++;
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

analyzeStructure();