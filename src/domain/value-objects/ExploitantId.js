const { ValidationError } = require('../../shared/errors/ValidationError');

/**
 * Value Object pour représenter un identifiant d'exploitant
 */
class ExploitantId {
  constructor(value) {
    this._value = value;
    this._validate();
    Object.freeze(this);
  }

  _validate() {
    if (!this._value || typeof this._value !== 'string') {
      throw new ValidationError('L\'identifiant exploitant doit être une chaîne de caractères');
    }

    if (this._value.trim().length === 0) {
      throw new ValidationError('L\'identifiant exploitant ne peut pas être vide');
    }

    if (this._value.length > 50) {
      throw new ValidationError('L\'identifiant exploitant ne peut pas dépasser 50 caractères');
    }

    // Validation du format (lettres, chiffres, tirets, underscores)
    const pattern = /^[a-zA-Z0-9_-]+$/;
    if (!pattern.test(this._value)) {
      throw new ValidationError('L\'identifiant exploitant ne peut contenir que des lettres, chiffres, tirets et underscores');
    }
  }

  get value() {
    return this._value;
  }

  /**
   * Vérifie si c'est un identifiant numérique
   */
  isNumeric() {
    return /^\d+$/.test(this._value);
  }

  /**
   * Vérifie si c'est un identifiant alphanumérique
   */
  isAlphanumeric() {
    return /^[a-zA-Z0-9]+$/.test(this._value);
  }

  /**
   * Obtient la valeur en majuscules
   */
  toUpperCase() {
    return this._value.toUpperCase();
  }

  toString() {
    return this._value;
  }

  equals(other) {
    if (!(other instanceof ExploitantId)) return false;
    return this._value === other._value;
  }
}

module.exports = { ExploitantId };