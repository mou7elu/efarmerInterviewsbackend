/**
 * Script pour ajouter tous les sauts logiques identifi√©s
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { Question } = require('./models');

const MONGO_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/efarmer_interviews';

async function addAllGotoLinks() {
  try {
    await mongoose.connect(MONGO_URI);
    console.log('üóÑÔ∏è Connect√© √† MongoDB');

    // Mapping √©tendu bas√© sur l'analyse du fichier Word
    const allMappings = [
      // Saut d√©j√† appliqu√©
      {
        source: 'Q006', // "√ätes-vous l'exploitant ?"
        condition: 'Oui',
        target: 'Q014', // "Avez-vous re√ßu une formation agricole ?"
        description: 'Si exploitant = Oui ‚Üí formation'
      },
      
      // Nouveaux sauts √† ajouter
      {
        source: 'Q015', // "Quel est votre pays d'origine ?"
        condition: 'C√¥te d\'Ivoire',
        target: 'Q016', // Question suivante logique
        description: 'Si pays origine = C√¥te d\'Ivoire ‚Üí question suivante'
      },
      
      // Sauts pour les questions de formation
      {
        source: 'Q014', // "Avez-vous re√ßu une formation agricole ?"
        condition: 'Non',
        target: 'Q016', // Sauter les d√©tails de formation
        description: 'Si formation = Non ‚Üí sauter d√©tails formation'
      },
      
      {
        source: 'Q024', // "Avez-vous suivi une formation agricole ?" (pour exploitant)
        condition: 'Non',
        target: 'Q026', // Sauter les d√©tails de formation
        description: 'Si formation exploitant = Non ‚Üí sauter d√©tails'
      },
      
      // Sauts pour les questions de compte bancaire
      {
        source: 'Q051', // "Avez-vous un compte bancaire ?"
        condition: 'Non',
        target: 'Q054', // Aller aux questions mobile money
        description: 'Si pas de compte bancaire ‚Üí mobile money'
      },
      
      {
        source: 'Q054', // "Avez-vous un compte mobile money ?"
        condition: 'Non',
        target: 'Q058', // Sauter les questions mobile money
        description: 'Si pas de mobile money ‚Üí sauter d√©tails mobile money'
      },
      
      // Sauts pour l'acc√®s Internet
      {
        source: 'Q044', // "Avez-vous acc√®s √† Internet ?"
        condition: 'Non',
        target: 'Q045', // Aller √† la question suivante
        description: 'Si pas d\'acc√®s Internet ‚Üí question suivante'
      },
      
      // Sauts pour le stockage
      {
        source: 'Q040', // "Avez-vous un b√¢timent de stockage ?"
        condition: 'Non',
        target: 'Q042', // Sauter les d√©tails de stockage
        description: 'Si pas de stockage ‚Üí sauter d√©tails stockage'
      }
    ];

    let linksApplied = 0;

    for (const mapping of allMappings) {
      console.log(`\nüîó ${mapping.description}`);
      console.log(`   ${mapping.source} (${mapping.condition}) ‚Üí ${mapping.target}`);
      
      // R√©cup√©rer la question source
      const sourceQuestion = await Question.findOne({ code: mapping.source });
      if (!sourceQuestion) {
        console.log(`   ‚ùå Question source ${mapping.source} non trouv√©e`);
        continue;
      }

      // R√©cup√©rer la question cible
      const targetQuestion = await Question.findOne({ code: mapping.target });
      if (!targetQuestion) {
        console.log(`   ‚ùå Question cible ${mapping.target} non trouv√©e`);
        continue;
      }

      console.log(`   üìù Source: "${sourceQuestion.texte.substring(0, 50)}..."`);
      console.log(`   üìù Cible: "${targetQuestion.texte.substring(0, 50)}..."`);

      // Trouver l'option correspondante
      const matchingOption = sourceQuestion.options.find(opt => {
        const optLower = opt.libelle.toLowerCase().trim();
        const condLower = mapping.condition.toLowerCase().trim();
        
        return optLower === condLower || 
               optLower.includes(condLower) ||
               opt.valeur.toLowerCase() === condLower.replace(/\s+/g, '_').replace(/'/g, '') ||
               (condLower === 'c√¥te d\'ivoire' && optLower.includes('c√¥te'));
      });

      if (matchingOption) {
        // V√©rifier si le saut n'existe pas d√©j√†
        if (matchingOption.goto) {
          const existingTarget = await Question.findById(matchingOption.goto);
          console.log(`   ‚ö†Ô∏è Saut d√©j√† existant: "${matchingOption.libelle}" ‚Üí ${existingTarget?.code || 'INCONNU'}`);
          continue;
        }
        
        // Appliquer le saut
        matchingOption.goto = targetQuestion._id.toString();
        await sourceQuestion.save();
        linksApplied++;
        console.log(`   ‚úÖ Saut appliqu√©: option "${matchingOption.libelle}" ‚Üí ${mapping.target}`);
      } else {
        console.log(`   ‚ùå Option "${mapping.condition}" non trouv√©e`);
        console.log(`   üìã Options disponibles: ${sourceQuestion.options.map(o => `"${o.libelle}"`).join(', ')}`);
      }
    }

    console.log(`\nüéâ ${linksApplied} nouveaux sauts logiques appliqu√©s !`);

    // V√©rification finale de tous les liens
    console.log('\nüîç R√âCAPITULATIF DE TOUS LES LIENS DE SAUT:');
    const questionsWithGoto = await Question.find({
      'options.goto': { $exists: true, $ne: null }
    }).sort({ code: 1 });

    let totalLinks = 0;
    for (const question of questionsWithGoto) {
      console.log(`\nüìù ${question.code}: ${question.texte.substring(0, 60)}...`);
      for (const option of question.options) {
        if (option.goto) {
          const targetQuestion = await Question.findById(option.goto);
          console.log(`   ‚Üí "${option.libelle}" va vers: ${targetQuestion ? targetQuestion.code : 'INTROUVABLE'}`);
          if (targetQuestion) {
            console.log(`     "${targetQuestion.texte.substring(0, 50)}..."`);
          }
          totalLinks++;
        }
      }
    }

    console.log(`\nüìä TOTAL: ${totalLinks} liens de saut actifs dans le syst√®me`);

    mongoose.disconnect();
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    mongoose.disconnect();
  }
}

addAllGotoLinks();