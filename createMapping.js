/**
 * Script pour cr√©er un mapping manuel entre les r√©f√©rences Word et notre syst√®me
 */

require('dotenv').config();
const mongoose = require('mongoose');
const mammoth = require('mammoth');
const path = require('path');
const { Question } = require('./models');

const MONGO_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/efarmer_interviews';
const DOCX_FILE = path.join(__dirname, 'Questionnaire_IEEA.docx');

async function createMapping() {
  try {
    await mongoose.connect(MONGO_URI);
    console.log('üóÑÔ∏è Connect√© √† MongoDB');

    // R√©cup√©rer toutes nos questions dans l'ordre
    const questions = await Question.find({}).sort({ code: 1 });
    
    // Lire le fichier Word
    const { value: text } = await mammoth.extractRawText({ path: DOCX_FILE });
    
    console.log('\nüîç MAPPING DES R√âF√âRENCES:');
    console.log('Recherche des questions qui pourraient correspondre aux r√©f√©rences du Word...\n');
    
    // Mapping manuel bas√© sur l'analyse du contenu
    const mappingHints = {
      16: "√ätes-vous l'exploitant", // Q.16 = "Oui" aller √† Q.34
      21: "pays d'origine",
      22: "C√¥te d'ivoire",
      34: "formation",
      37: "pays",
      38: "apr√®s formation",
      47: "nationalit√©",
      48: "document",
      49: "identit√©",
      53: "personnes vivent",
      55: "enfants"
    };
    
    const mapping = new Map();
    
    for (const [wordNum, hint] of Object.entries(mappingHints)) {
      console.log(`üîç Recherche de Q.${wordNum} (indices: "${hint}"):`);
      
      const matchingQuestions = questions.filter(q => 
        q.texte.toLowerCase().includes(hint.toLowerCase()) ||
        q.texte.toLowerCase().includes(hint.toLowerCase().split(' ')[0])
      );
      
      if (matchingQuestions.length > 0) {
        console.log(`   Candidats trouv√©s:`);
        matchingQuestions.forEach(q => {
          console.log(`      ${q.code}: ${q.texte.substring(0, 80)}...`);
        });
        
        // Prendre le premier match le plus pertinent
        const bestMatch = matchingQuestions[0];
        mapping.set(`Q.${wordNum}`, bestMatch.code);
        console.log(`   ‚úÖ Mapping: Q.${wordNum} ‚Üí ${bestMatch.code}`);
      } else {
        console.log(`   ‚ùå Aucune correspondance trouv√©e`);
      }
      console.log('');
    }
    
    console.log('\nüìä MAPPING FINAL:');
    mapping.forEach((systemCode, wordRef) => {
      console.log(`   ${wordRef} ‚Üí ${systemCode}`);
    });
    
    // Maintenant chercher les sauts logiques et les appliquer
    console.log('\nüîó APPLICATION DES SAUTS LOGIQUES:');
    const gotoPattern = /Si\s+Q\.(\d+)\s*=\s*["""]?([^"""]+?)["""]?,?\s*aller\s+√†\s+Q\.(\d+)/gi;
    
    let match;
    let jumpsApplied = 0;
    
    while ((match = gotoPattern.exec(text)) !== null) {
      const sourceWordRef = `Q.${match[1]}`;
      const condition = match[2].trim();
      const targetWordRef = `Q.${match[3]}`;
      
      const sourceSystemCode = mapping.get(sourceWordRef);
      const targetSystemCode = mapping.get(targetWordRef);
      
      if (sourceSystemCode && targetSystemCode) {
        console.log(`‚úÖ ${sourceWordRef} (${sourceSystemCode}) = "${condition}" ‚Üí ${targetWordRef} (${targetSystemCode})`);
        
        // Appliquer le saut √† la question
        const sourceQuestion = await Question.findOne({ code: sourceSystemCode });
        if (sourceQuestion) {
          // Trouver l'option correspondante
          const matchingOption = sourceQuestion.options.find(opt => 
            opt.libelle.toLowerCase().includes(condition.toLowerCase()) ||
            opt.valeur.toLowerCase().includes(condition.toLowerCase().replace(/\s+/g, '_'))
          );
          
          if (matchingOption) {
            matchingOption.goto = targetSystemCode;
            await sourceQuestion.save();
            jumpsApplied++;
            console.log(`   ‚úÖ Saut appliqu√©: ${sourceSystemCode}.options[${matchingOption.libelle}] ‚Üí ${targetSystemCode}`);
          } else {
            console.log(`   ‚ùå Option "${condition}" non trouv√©e dans ${sourceSystemCode}`);
          }
        }
      } else {
        console.log(`‚ùå ${sourceWordRef} = "${condition}" ‚Üí ${targetWordRef} (mapping manquant)`);
      }
    }
    
    console.log(`\nüéâ ${jumpsApplied} sauts logiques appliqu√©s avec succ√®s !`);
    
    mongoose.disconnect();
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    mongoose.disconnect();
  }
}

createMapping();